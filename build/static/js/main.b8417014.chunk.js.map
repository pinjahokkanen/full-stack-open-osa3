{"version":3,"sources":["services/persons.js","components/Person.js","components/Persons.js","components/Filter.js","components/PersonForm.js","App.js","index.js"],"names":["baseUrl","axios","get","newObject","post","id","delete","put","Person","person","removePerson","name","number","onClick","Persons","persons","filterName","filter","toLowerCase","includes","map","key","Filter","handleFilterChange","value","onChange","PersonForm","addPerson","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","type","App","useState","setPersons","setNewName","setNewNumber","setNewFilter","message","setMessage","useEffect","personService","then","response","data","className","event","target","preventDefault","personObject","some","oldPerson","find","n","changedPerson","window","confirm","setTimeout","catch","error","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b8417014.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  return axios.get(baseUrl)\n}\n\nconst create = newObject => {\n  return axios.post(baseUrl, newObject)\n}\n\nconst remove = (id) => {\n    return axios.delete(`${baseUrl}/${id}`)\n}\n\nconst update = (id, newObject) => {\n  return axios.put(`${baseUrl}/${id}`, newObject)\n}\n\nexport default { getAll, create, remove, update }","import React from 'react'\n\nconst Person = ({ person, removePerson }) => {\n  return (\n    <div>{person.name} {person.number} <button onClick={removePerson}>delete</button></div>\n  )\n}\n\nexport default Person","import React from 'react'\nimport Person from './Person'\n\nconst Persons = ({ persons, filterName, removePerson }) => {\n  const namesToShow = filterName === ''\n  ? persons\n  : persons.filter(person => person.name.toLowerCase().includes(filterName.toLowerCase()))\n\n  return namesToShow.map(person => <Person key={person.name} person={person} removePerson={() => removePerson(person.id, person.name)} />)\n}\n\nexport default Persons","import React from 'react'\n\nconst Filter = ({ filterName, handleFilterChange, persons}) => {\n  return (\n    <div>filter shown with <input value={filterName} onChange={handleFilterChange}/></div>\n  )\n}\n\nexport default Filter","import React from 'react'\n\nconst PersonForm = ({ addPerson, newName, handleNameChange, newNumber, handleNumberChange}) => {\n  return (\n    <form onSubmit={addPerson}>\n        <div>name: <input value={newName} onChange={handleNameChange}/></div>\n        <div>number: <input value={newNumber} onChange={handleNumberChange}/></div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n  )\n}\n\nexport default PersonForm","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\nimport Persons from './components/Persons'\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ filterName, setNewFilter] = useState('')\n  const [ message, setMessage ] = useState(null)\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(response => {\n        setPersons(response.data)\n      })\n  }, [])\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    const personObject = {\n      name: newName,\n      number: newNumber\n    }\n    \n    if (persons.some(person => (person.name.toLowerCase() === newName.toLowerCase()) && (person.number !== newNumber))) {\n      const oldPerson = persons.find(n => n.name.toLowerCase() === newName.toLowerCase())\n      const changedPerson = { ...oldPerson, number: newNumber }\n\n      if (window.confirm(`${oldPerson.name} is already added to the phonebook, replace the old number with a new one?`)) {\n        personService\n          .update(oldPerson.id, changedPerson)\n          .then(response => {\n            setPersons(persons.map(person => person.id !== oldPerson.id ? person : response.data))\n            setNewName('')\n            setNewNumber('')\n            setMessage(`Replaced ${changedPerson.name}'s number with the number ${changedPerson.number} succesfully.`)\n            setTimeout(() => {\n              setMessage(null)\n            }, 5000)\n          })\n          .catch(error => {\n            setMessage(`Person '${oldPerson.name}' was already removed from server`)\n            setTimeout(() => {\n              setMessage(null)\n            }, 5000)\n            setPersons(persons.filter(n => n.name !== newName))\n          })\n      }\n    } else if (persons.some(person => person.name.toLowerCase() === newName.toLowerCase())) {\n      setNewName('')\n      setNewNumber('')\n      setMessage(`${newName} is already added to phonebook`)\n      setTimeout(() => {\n        setMessage(null)\n      }, 5000)\n    } else {\n      personService\n        .create(personObject)\n        .then(response => {\n          setPersons(persons.concat(response.data))\n          setNewName('')\n          setNewNumber('')\n          setMessage(`${newName} added to the phonebook succesfully.`)\n          setTimeout(() => {\n            setMessage(null)\n          }, 5000)\n        })\n    }\n  }\n\n  const removePerson = (id, name ) => {\n    if (window.confirm(`Delete ${name}?`)) {\n      personService\n      .remove(id)\n        .then(response => {\n          setPersons(persons.filter(n => n.id !== id))\n          setMessage(`${newName} removed from the phonebook succesfully.`)\n          setTimeout(() => {\n            setMessage(null)\n          }, 5000)\n      })\n    }\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    setNewFilter(event.target.value)\n  }\n\n  const Notification = ({ message }) => {\n    if (message === null) {\n      return null\n    } else if ( message.includes(\"succesfully\")) {\n      return (\n        <div className=\"success\">\n          {message}\n        </div>\n      )\n    } else {\n      return (\n        <div className=\"error\">\n          {message}\n        </div>\n      )\n    }\n  }\n\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n        <Notification message={message} />\n        <Filter filterName={filterName} handleFilterChange={handleFilterChange} persons={persons} />\n      <h2>Add a new person</h2>\n        <PersonForm addPerson={addPerson} newName={newName} handleNameChange={handleNameChange} newNumber={newNumber} handleNumberChange={handleNumberChange} />\n      <h2>Numbers</h2>\n        <Persons persons={persons} filterName={filterName} removePerson={removePerson}/>\n    </div>\n  )\n\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}